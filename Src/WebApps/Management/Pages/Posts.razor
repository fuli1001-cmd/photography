@page "/posts/{type}"

@using Photography.WebApps.Management.ViewModels
@using Photography.WebApps.Management.Data
@inject PostService PostService

@if (!string.IsNullOrWhiteSpace(_type))
{
    @if (_type == "p")
    {
        <h3>帖子审核</h3>
    }
    else if (_type == "a")
    {
        <h3>约拍审核</h3>
    }
}

@if (pagedData != null)
{
    <table class="table">
        <thead>
            <tr>
                <th style="width:8%;">文字</th>
                <th style="width:8%;">作者</th>
                @if (_type == "p")
                {
                    <th style="width:8%;">状态</th>
                }
                <th style="width:65%;">图片</th>
                <th>操作</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var post in pagedData.Data)
            {
            <tr>
                <td style="width:8%;" class="text-justify">@post.Text</td>
                <td style="width:8%;"><a href="./users/@post.User.Id" class="text-justify">@post.User.Nickname</a></td>
                @if (_type == "p")
                {
                    @if (post.PostAuthStatus == PostAuthStatus.Authenticating)
                    {
                        <td style="width:8%;" class="text-justify">审核中</td>
                    }
                    else if (post.PostAuthStatus == PostAuthStatus.Authenticated)
                    {
                        <td style="width:8%;" class="text-justify">已通过</td>
                    }
                    else if (post.PostAuthStatus == PostAuthStatus.Rejected)
                    {
                        <td style="width:8%;" class="text-justify">已拒绝</td>
                    }
                }
                <td style="width:60%;">
                    <div class="row">
                        @foreach (var attachment in post.PostAttachments)
                        {
                            <div class="col">
                                <div class="row">
                                    @if (attachment.AttachmentType == ViewModels.AttachmentType.Image)
                                    {
                                        <img src="@attachment.Name" style="width:50px;" />
                                    }
                                    else if (attachment.AttachmentType == ViewModels.AttachmentType.Video)
                                    {
                                        <video controls style="width:200px;">
                                            <source src="@attachment.Name" type="video/mp4" />
                                            浏览器不支持
                                        </video>
                                    }
                                </div>
                                <div class="row" style="word-break:break-word;">@attachment.Text</div>
                            </div>
                        }
                    </div>
                </td>
                <td>
                    <button type="button" class="btn btn-danger btn-sm" style="width: 50px" @onclick="@(async () => await DeletePostAsync(post))">删除</button>
                    @if (_type == "p")
                    {
                        @if (post.PostAuthStatus == PostAuthStatus.Authenticating)
                        {
                            <button type="button" class="btn btn-success btn-sm" @onclick="@(async () => await ExamineAsync(post, PostAuthStatus.Authenticated))">通过</button>
                            <button type="button" class="btn btn-danger btn-sm" @onclick="@(async () => await ExamineAsync(post, PostAuthStatus.Rejected))">拒绝</button>
                        }
                        else if (post.PostAuthStatus == PostAuthStatus.Authenticated)
                        {
                            <button type="button" class="btn btn-danger btn-sm" @onclick="@(async () => await ExamineAsync(post, PostAuthStatus.Rejected))">拒绝</button>
                        }
                        else if (post.PostAuthStatus == PostAuthStatus.Rejected)
                        {
                            <button type="button" class="btn btn-success btn-sm" @onclick="@(async () => await ExamineAsync(post, PostAuthStatus.Authenticated))">通过</button>
                        }
                    }
                    </td>
            </tr>
            }
        </tbody>
    </table>

    <Pager PageIndex=@pagedData.PagingInfo.CurrentPage TotalPages=@pagedData.PagingInfo.TotalPages OnClick="PageIndexChanged"
           HasNextPage=@hasNextPage HasPreviousPage=@hasPreviousPage>
    </Pager>
}

@code {
    private PagedResponseWrapper<List<Photography.WebApps.Management.ViewModels.Post>> pagedData;
    private bool hasNextPage;
    private bool hasPreviousPage;
    private string _type;

    [Parameter]
    public string Type
    {
        get { return _type; }
        set
        {
            _type = value?.ToLower() ?? string.Empty;
            TypeChanged();
        }
    }

    //protected override async Task OnInitializedAsync()
    //{
    //    await GetDataAsync(1, 10);
    //}

    private async Task TypeChanged()
    {
        await GetDataAsync(1, 10);
        StateHasChanged();
    }

    public async void PageIndexChanged(int pageNumber)
    {
        if (pageNumber < 1 || pageNumber > pagedData.PagingInfo.TotalPages)
            return;

        await GetDataAsync(pageNumber, 10);

        StateHasChanged();
    }

    private async Task DeletePostAsync(ViewModels.Post post)
    {
        var result = false;
        if (_type == "p")
            result = await PostService.DeletePostAsync(post);
        else if (_type == "a")
            result = await PostService.DeleteAppointmentAsync(post);

        if (result)
        {
            await GetDataAsync(pagedData.PagingInfo.CurrentPage, 10);
            StateHasChanged();
        }
    }

    private async Task GetDataAsync(int pageNumber, int pageSize)
    {
        if (!string.IsNullOrWhiteSpace(_type))
        {
            if (_type == "p")
                pagedData = await PostService.GetPostsAsync(pageNumber, pageSize);
            else if (_type == "a")
                pagedData = await PostService.GetAppointmentsAsync(pageNumber, pageSize);

            SetProperties();
        }
    }

    private void SetProperties()
    {
        if (pagedData != null && pagedData.PagingInfo != null)
        {
            hasNextPage = pagedData.PagingInfo.CurrentPage < pagedData.PagingInfo.TotalPages;
            hasPreviousPage = pagedData.PagingInfo.CurrentPage > 1;
        }
    }

    private async Task ExamineAsync(ViewModels.Post post, PostAuthStatus status)
    {
        if (await PostService.ExaminePostAsync(post, status))
            post.PostAuthStatus = status;
    }
}
