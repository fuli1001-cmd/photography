@page "/users"

@using Photography.WebApps.Management.ViewModels
@using Photography.WebApps.Management.Data
@inject UserService UserService

<h3>用户管理</h3>

@if (pagedData != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>昵称</th>
                <th>简介</th>
                <th>头像</th>
                <th>背景图</th>
                <th>操作</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in pagedData.Data)
            {
                <tr>
                    <td><a href="./users/@user.Id" class="text-justify">@user.Nickname</a></td>
                    <td>@user.Sign</td>
                    <td>
                        @if (!string.IsNullOrWhiteSpace(user.Avatar))
                        {
                            <img src="@user.Avatar" style="width:50px;" />
                        }
                    </td>
                    <td>
                        @if (!string.IsNullOrWhiteSpace(user.BackgroundImage))
                        {
                            <img src="@user.BackgroundImage" style="width:50px;" />
                        }
                    </td>
                    <td>
                        <button type="button" class="btn btn-danger btn-sm" @onclick="@(async () => await DeleteAvatarAsync(user))">删除头像</button>
                        <button type="button" class="btn btn-danger btn-sm" @onclick="@(async () => await DeleteBackgroundImageAsync(user))">删除背景图</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <Pager PageIndex=@pagedData.PagingInfo.CurrentPage TotalPages=@pagedData.PagingInfo.TotalPages OnClick="PageIndexChanged"
           HasNextPage=@hasNextPage HasPreviousPage=@hasPreviousPage>
    </Pager>
}

@code {
    private PagedResponseWrapper<List<Photography.WebApps.Management.ViewModels.User>> pagedData;
    private bool hasNextPage;
    private bool hasPreviousPage;

    protected override async Task OnInitializedAsync()
    {
        pagedData = await UserService.GetUsersAsync(1, 10);
        SetProperties();
    }

    public async void PageIndexChanged(int pageNumber)
    {
        if (pageNumber < 1 || pageNumber > pagedData.PagingInfo.TotalPages)
            return;

        pagedData = await UserService.GetUsersAsync(pageNumber, 10);
        SetProperties();

        StateHasChanged();
    }

    private void SetProperties()
    {
        hasNextPage = pagedData.PagingInfo.CurrentPage < pagedData.PagingInfo.PageSize;
        hasPreviousPage = pagedData.PagingInfo.CurrentPage > 1;
    }

    private async Task DeleteAvatarAsync(ViewModels.User user)
    {
        if (!string.IsNullOrWhiteSpace(user.Avatar))
        {
            var avatar = user.Avatar;
            user.Avatar = null;
            if (!await UserService.UpdateUserAsync(user))
                user.Avatar = avatar;
        }
    }

    private async Task DeleteBackgroundImageAsync(ViewModels.User user)
    {
        if (!string.IsNullOrWhiteSpace(user.BackgroundImage))
        {
            var backgroundImage = user.BackgroundImage;
            user.BackgroundImage = null;
            if (!await UserService.UpdateUserBackgroundAsync(user))
                user.BackgroundImage = backgroundImage;
        }
    }
}
