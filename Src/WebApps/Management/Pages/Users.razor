@page "/users"

@using Photography.WebApps.Management.ViewModels
@using Photography.WebApps.Management.Data
@inject UserService UserService

<div class="row">
    <div class="col-auto"><h3>用户审核</h3></div>
    <div class="col">
        <input type="text" class="form-control float-right" style="min-width:100px; max-width:250px;" placeholder="搜索昵称" @bind="searchKey" />
    </div>
    <div class="col-auto">
        <button type="button" class="btn btn-primary" @onclick="@(async () => await GetUsersAsync(1))">搜索</button>
    </div>
</div>

@if (pagedData != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>昵称</th>
                <th>简介</th>
                <th>实名认证</th>
                <th>团体认证</th>
                <th>头像</th>
                <th>背景图</th>
                <th>操作</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in pagedData.Data)
            {
            <tr>
                <td><a href="./users/@user.Id" class="text-justify">@user.Nickname</a></td>
                <td>@user.Sign</td>
                <td>
                    @if (user.RealNameRegistrationStatus == AuthStatus.Authenticated)
                    {
                        <span>已认证</span>
                    }
                    else @if (user.RealNameRegistrationStatus == AuthStatus.Authenticating)
                    {
                        <span>认证中</span>
                    }
                    else @if (user.RealNameRegistrationStatus == AuthStatus.NotAuthenticated)
                    {
                        <span>未上传</span>
                    }
                    else @if (user.RealNameRegistrationStatus == AuthStatus.Rejected)
                    {
                        <span>已拒绝</span>
                    }
                </td>
                <td>
                    @if (user.OrgAuthStatus == AuthStatus.Authenticated)
                    {
                        <a href="./users/@user.Id/orgauth" class="text-justify">已认证</a>
                    }
                    else @if (user.OrgAuthStatus == AuthStatus.Authenticating)
                    {
                        <a href="./users/@user.Id/orgauth" class="text-justify">认证中</a>
                    }
                    else @if (user.OrgAuthStatus == AuthStatus.NotAuthenticated)
                    {
                        <span>未上传</span>
                    }
                    else @if (user.OrgAuthStatus == AuthStatus.Rejected)
                    {
                        <a href="./users/@user.Id/orgauth" class="text-justify">已拒绝</a>
                    }
                </td>
                <td>
                    @if (!string.IsNullOrWhiteSpace(user.Avatar))
                    {
                        <img src="@user.Avatar" style="width:50px;" />
                    }
                </td>
                <td>
                    @if (!string.IsNullOrWhiteSpace(user.BackgroundImage))
                    {
                        <img src="@user.BackgroundImage" style="width:50px;" />
                    }
                </td>
                <td>
                    <button type="button" class="btn btn-danger btn-sm" @onclick="@(async () => await DeleteAvatarAsync(user))">删除头像</button>
                    <button type="button" class="btn btn-danger btn-sm" @onclick="@(async () => await DeleteBackgroundImageAsync(user))">
                        删除背景图
                    </button>
                    @if (user.Disabled)
                    {
                        <button type="button" class="btn btn-danger btn-sm" @onclick="@(async () => await EnableUserAsync(user))">启用</button>
                    }
                    else
                    {
                        <button type="button" class="btn btn-danger btn-sm" @onclick="@(async () => await DisableUserAsync(user))">禁用</button>
                    }
                </td>
            </tr>
            }
        </tbody>
    </table>

    <Pager PageIndex=@pagedData.PagingInfo.CurrentPage TotalPages=@pagedData.PagingInfo.TotalPages OnClick="PageIndexChanged"
           HasNextPage=@hasNextPage HasPreviousPage=@hasPreviousPage>
    </Pager>
}

@code {
    private PagedResponseWrapper<List<Photography.WebApps.Management.ViewModels.User>> pagedData;
    private bool hasNextPage;
    private bool hasPreviousPage;
    private string searchKey;

    protected override async Task OnInitializedAsync()
    {
        //pagedData = await UserService.GetUsersAsync(1, 10);
        //SetProperties();
        await GetUsersAsync(1);
    }

    public async void PageIndexChanged(int pageNumber)
    {
        //if (pageNumber < 1 || pageNumber > pagedData.PagingInfo.TotalPages)
        //    return;

        //pagedData = await UserService.GetUsersAsync(pageNumber, 10);
        //SetProperties();

        await GetUsersAsync(pageNumber);

        StateHasChanged();
    }

    private async Task GetUsersAsync(int pageNumber)
    {
        if (pageNumber < 1 || pageNumber > (pagedData?.PagingInfo.TotalPages ?? 1))
            return;

        pagedData = await UserService.GetUsersAsync(searchKey, pageNumber, 10);

        SetProperties();
    }

    private void SetProperties()
    {
        hasNextPage = pagedData.PagingInfo.CurrentPage < pagedData.PagingInfo.TotalPages;
        hasPreviousPage = pagedData.PagingInfo.CurrentPage > 1;
    }

    private async Task DeleteAvatarAsync(ViewModels.User user)
    {
        if (!string.IsNullOrWhiteSpace(user.Avatar))
        {
            var avatar = user.Avatar;
            user.Avatar = null;
            if (!await UserService.UpdateUserAsync(user))
                user.Avatar = avatar;
        }
    }

    private async Task DeleteBackgroundImageAsync(ViewModels.User user)
    {
        if (!string.IsNullOrWhiteSpace(user.BackgroundImage))
        {
            var backgroundImage = user.BackgroundImage;
            user.BackgroundImage = null;
            if (!await UserService.UpdateUserBackgroundAsync(user))
                user.BackgroundImage = backgroundImage;
        }
    }

    private async Task EnableUserAsync(ViewModels.User user)
    {
        await UserService.DisableUserAsync(user, false);
    }

    private async Task DisableUserAsync(ViewModels.User user)
    {
        await UserService.DisableUserAsync(user, true);
    }
}
